#! /bin/sh
### BEGIN INIT INFO
# Provides:          iot
# Required-Start:    $remote_fs $syslog $network
# Required-Stop:     $remote_fs $syslog
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: IoT service
# Description:       IoT service used to publish the events from
#		from Raspberry Pi to the IoT cloud service
### END INIT INFO

# =============================================================================
# Copyright (c) 2014 IBM Corporation and other Contributors.
#
# All rights reserved. This program and the accompanying materials
# are made available under the terms of the Eclipse Public License v1.0
# which accompanies this distribution, and is available at
# http://www.eclipse.org/legal/epl-v10.html
#
# Contributors: 
#   Jeffrey Dare - Initial Contribution
# =============================================================================

# Do NOT "set -e"

# PATH should only include /usr/* if it runs after the mountnfs.sh script
PATH=/sbin:/usr/sbin:/bin:/usr/bin
DESC="This service is used to publish events from the Raspberry Pi to the Internet of Things cloud"
NAME=iot
DAEMON=/opt/iot/$NAME
PIDFILE=/opt/.$NAME.pid
SCRIPTNAME=/etc/init.d/$NAME
LOCKFILE=/opt/.$NAME.lck

# Exit if the package is not installed
[ -x "$DAEMON" ] || exit 0

# Load the VERBOSE setting and other rcS variables
. /lib/init/vars.sh

# Define LSB log_* functions.
# Depend on lsb-base (>= 3.2-14) to ensure that this file is present
# and status_of_proc is working.
. /lib/lsb/init-functions

#
# Function that starts the daemon/service
#
do_start()
{
	# Return
	#   0 if daemon has been started
	#   1 if daemon was already running
	#   2 if daemon could not be started
	echo "Starting the iot program"

	if [ -e "$LOCKFILE" ]
	then 
		echo "There is another process of IOT-Raspberry Pi running. If there are no other IOT-Raspberry process running, please delete the $LOCKFILE file and start again"
		return 1
	fi
	$DAEMON /dev/null 2>&1 &
	echo $! > $PIDFILE
	touch $LOCKFILE
	return 0

}

#
# Function that stops the daemon/service
#
do_stop()
{
	# Return
	#   0 if daemon has been stopped
	#   1 if daemon was already stopped
	#   2 if daemon could not be stopped
	#   other if a failure occurred
	echo "Stopping the program"
	if [ -e "$PIDFILE" ]
	then
        	pid="`cat $PIDFILE`"
        	echo "Stopping the IoT-Raspberry Pi program with pid : $pid"
        	kill -USR1 $pid
        	rm -f $PIDFILE
        	rm -f $LOCKFILE
		return 0
	else
        	echo "The IoT-Raspberry process is already stopped."
		rm -f $LOCKFILE
		return 1
	fi

	return 2

}

#
# Function that sends a SIGHUP to the daemon/service
#
do_reload() {
	#
	# If the daemon can reload its configuration without
	# restarting (for example, when it is sent a SIGHUP),
	# then implement that here.
	#
	start-stop-daemon --stop --signal 1 --quiet --pidfile $PIDFILE --name $NAME
	return 0
}

case "$1" in
  start)
	[ "$VERBOSE" != no ] && log_daemon_msg "Starting $DESC" "$NAME"
	do_start
	case "$?" in
		0|1) [ "$VERBOSE" != no ] && log_end_msg 0 ;;
		2) [ "$VERBOSE" != no ] && log_end_msg 1 ;;
	esac
	;;
  stop)
	[ "$VERBOSE" != no ] && log_daemon_msg "Stopping $DESC" "$NAME"
	do_stop
	case "$?" in
		0|1) [ "$VERBOSE" != no ] && log_end_msg 0 ;;
		2) [ "$VERBOSE" != no ] && log_end_msg 1 ;;
	esac
	;;
  status)
	status_of_proc "$DAEMON" "$NAME" && exit 0 || exit $?
	;;
  getdeviceid)
        /opt/iot/iotGetDeviceID.sh && exit 0 || exit $?
        ;;

  #reload|force-reload)
	#
	# If do_reload() is not implemented then leave this commented out
	# and leave 'force-reload' as an alias for 'restart'.
	#
	#log_daemon_msg "Reloading $DESC" "$NAME"
	#do_reload
	#log_end_msg $?
	#;;
  restart|force-reload)
	#
	# If the "reload" option is implemented then remove the
	# 'force-reload' alias
	#
	log_daemon_msg "Restarting $DESC" "$NAME"
	do_stop
	case "$?" in
	  0|1)
		do_start
		case "$?" in
			0) log_end_msg 0 ;;
			1) log_end_msg 1 ;; # Old process is still running
			*) log_end_msg 1 ;; # Failed to start
		esac
		;;
	  *)
		# Failed to stop
		log_end_msg 1
		;;
	esac
	;;
  *)
	#echo "Usage: $SCRIPTNAME {start|stop|restart|reload|force-reload}" >&2
	echo "Usage: $SCRIPTNAME {start|stop|status|restart|force-reload|getdeviceid}" >&2
	exit 3
	;;
esac

exit 0
